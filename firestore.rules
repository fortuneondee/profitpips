rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isInvolvedInTransaction() {
      return (
        request.auth.uid == resource.data.senderId ||
        request.auth.uid == resource.data.recipientId
      );
    }

    function isInvolvedInChat(participants) {
      return request.auth.uid in participants;
    }

    // User collection rules
    match /users/{userId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        request.auth.uid == userId ||
        (
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['balance', 'usdtBalance', 'isOnline', 'lastSeen'])
        )
      );
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }

    // Global transactions collection
    match /transactions/{transactionId} {
      allow read: if isAuthenticated() && (
        resource == null ||  // Allow read for new documents
        isInvolvedInTransaction()
      );
      
      allow create: if isAuthenticated() && (
        request.resource.data.senderId == request.auth.uid &&
        (
          request.resource.data.type in ['transfer', 'game', 'deposit', 'buy_usdt', 'sell_usdt'] &&
          request.resource.data.amount > 0 &&
          request.resource.data.amount <= 1000000 &&
          request.resource.data.keys().hasAll([
            'type',
            'amount',
            'senderId',
            'status',
            'description',
            'createdAt'
          ])
        )
      );
    }

    // Chats collection
    match /chats/{chatId} {
      allow read: if isAuthenticated() && 
        (resource == null || isInvolvedInChat(resource.data.participants));
      
      allow create: if isAuthenticated() && 
        isInvolvedInChat(request.resource.data.participants);
      
      allow update: if isAuthenticated() && 
        isInvolvedInChat(resource.data.participants);

      // Messages subcollection
      match /messages/{messageId} {
        allow read: if isAuthenticated() && 
          isInvolvedInChat(get(/databases/$(database)/documents/chats/$(chatId)).data.participants);
        
        allow create: if isAuthenticated() && 
          isInvolvedInChat(get(/databases/$(database)/documents/chats/$(chatId)).data.participants) &&
          request.resource.data.senderId == request.auth.uid;
        
        allow update: if isAuthenticated() && 
          isInvolvedInChat(get(/databases/$(database)/documents/chats/$(chatId)).data.participants) &&
          (request.auth.uid == resource.data.recipientId) &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read', 'readAt']);
      }
    }
  }
}